import math

side_weights = [0.76923077, 0.83516484, 0.89010989, 0.93406593, 0.96703297, 0.98901099, 1., 1., 0.98901099, 0.96703297,
                0.93406593, 0.89010989, 0.83516484, 0.76923077, 0.69230769, 0.6043956, 0.50549451, 0.3956044,
                0.27472527, 0.14285714, 0., 0., 0., 0., -0.05298124, -0.12320451, -0.21419228, -0.33168991, -0.45528813,
                -0.55592047, -0.65433926, -0.76911319, -0.88456759, -1., -0.87059673, -0.79876319, -0.70303521,
                -0.54998881, -0.44852226, -0.36138406, -0.27260266, -0.1208924, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                0.17052701, 0.59630162, 1., 0.70671317, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.21371, -1.,
                -0.39991108, 0., 0., 0., 0., 0.34422218, 0.45896291, 0.34422218, 0., 0., 0., 0., -0.29170773,
                -0.54022915, -0.7554555, -0.87998036, -1., -0.69238458, -0.46855806, -0.28076513, -0.08943792, 0., 0.,
                0., 0., 0.2738131, 0.46939389, 0.58674236, 0.62585852, 0.58674236, 0.46939389, 0.2738131, 0., 0., 0.,
                0., -0.12013132, -0.7214941, -1., -0.57455371, 0., 0., 0., 0., 0.14285714, 0.27472527, 0.3956044,
                0.50549451, 0.6043956, 0.69230769]

speed_weights = [0.98920763, 0.9937659, 0.99670049, 0.99845225, 0.99939205, 0.99982079, 0.9999694, 0.99999881, 1.,
                 0.99999396, 0.9999317, 0.99969427, 0.99909274, 0.99786818, 0.99569171, 0.99216447, 0.98681762,
                 0.97911234, 0.96843984, 0.95412135, 0.93540813, 0.91148146, 0.85833716, 0.78530032, 0.66395853,
                 0.58571993, 0.49011093, 0.3955705, 0.32328202, 0.22637519, 0.098404, 0., 0., 0.29909537, 0.44953908,
                 0.54036869, 0.59746861, 0.64493402, 0.66971891, 0.67314546, 0.69172392, 0.73071112, 0.81313655,
                 0.8543204, 0.87404379, 0.87015915, 0.8597005, 0.83764771, 0.79754628, 0.73150741, 0.6139308,
                 0.42997205, 0.14789615, 0., 0.14858599, 0.32746789, 0.49577578, 0.58151011, 0.6200246, 0.62449221,
                 0.62499856, 0.62495731, 0.62351505, 0.6155513, 0.59167854, 0.51166737, 0.3698594, 0.09698198, 0.,
                 0.19643056, 0.44984887, 0.58715109, 0.67157938, 0.69594803, 0.70556641, 0.70808841, 0.70833315,
                 0.70828496, 0.70709341, 0.66852216, 0.59491759, 0.44818679, 0.35483713, 0.23104195, 0.05072928, 0.,
                 0.24903727, 0.42261445, 0.5815519, 0.69761691, 0.79907039, 0.84700031, 0.87015915, 0.87404379,
                 0.87494024, 0.875, 0.87494024, 0.87404379, 0.87015915, 0.8597005, 0.83764771, 0.79754628, 0.73150741,
                 0.59669075, 0.40011247, 0.06443096, 0., 0.25348365, 0.43751464, 0.61604451, 0.74579827, 0.818295,
                 0.86011041, 0.89425621, 0.92173305, 0.94347162, 0.96033262, 0.97310678, 0.98251486]

steering_weights = [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.009327,
                    -0.03101635, -0.0687235, -0.12711535, -0.20726585, -0.30513202, -0.42032417, -0.54639452,
                    -0.68042752, -0.81876384, -0.91363487, -0.97410141, -1., -0.98162978, -0.92519184, -0.8330888,
                    -0.70503525, -0.5730547, -0.43243765, -0.30867289, -0.21185095, -0.13289154, -0.06927224,
                    -0.02128232, 0., 0., 0., 0., 0.03002017, 0.13499517, 0.31103864, 0.43545088, 0.43545088, 0.43545088,
                    0.43545088, 0.40543072, 0.30045571, 0.12441224, 0., 0., 0., 0., 0., -0.03762225, -0.21366572,
                    -0.28406745, -0.28406745, -0.28406745, -0.28406745, -0.28406745, -0.2464452, -0.07040173, 0., 0.,
                    0., 0., 0., -0.05135324, -0.14645706, -0.27945006, -0.43436486, -0.61040833, -0.73229811,
                    -0.8147847, -0.81285833, -0.73349947, -0.60050647, -0.44559167, -0.2695482, -0.14765842,
                    -0.06517183, -0.01574496, 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.02114833, -0.14816266, -0.32420613,
                    -0.42535256, -0.42535256, -0.42535256, -0.42535256, -0.40420422, -0.2771899, -0.10114643, 0., 0.,
                    0., 0., 0., 0., 0.]

no_steering_weights = [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0.990673, 0.95032965,
                       0.83193579, 0.55541024, 0.04020334, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                       0., 0., 0., 0., 0., 0., 0.11758312, 0.64343472, 0.9181833, 0.82624681, 0.29889034, 0., 0., 0.,
                       0., 0., 0., 0., 0., 0., 0., 0., 0.45071981, 0.91321001, 0.71108978, 0.13811211, 0., 0., 0., 0.,
                       0., 0., 0., 0., 0., 0., 0.61275133, 0.87824502, 0.75083646, 0.22222286, 0., 0., 0., 0., 0., 0.,
                       0., 0., 0., 0., 0., 0., 0., 0., 0.07997789, 0.65901808, 0.90333825, 0.98425504, 1., 1., 1.,
                       0.97885167, 0.80954067, 0.29487521, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.52051724,
                       0.89885357, 1., 1., 1., 1., 1.]


def reward_function(params):
    # Initialize the reward with typical value
    reward = 5.0

    # Read inputs
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    steering_angle = params['steering_angle']
    is_left_of_center = params['is_left_of_center']
    speed = params['speed']
    distance_from_center = params['distance_from_center']
    track_width = params['track_width']
    side_weight = side_weights[closest_waypoints[1]]
    speed_weight = speed_weights[closest_waypoints[1]]
    steering_weight = steering_weights[closest_waypoints[1]]
    no_steering_weight = no_steering_weights[closest_waypoints[1]]

    # Increase reward if on the right side of the track
    if (side_weight > 0 and not is_left_of_center) or (side_weight < 0 and is_left_of_center):
        reward += side_weight

    # Increase reward if going sufficiently fast
    if speed > speed_weight * 2.5:
        reward += speed_weight

    # Decrease reward if going too far from the center of the track (based on example reward func)
    if distance_from_center > track_width / 3:
        reward *= 0.5

    # Decrease reward if turning in the wrong direction (e.g. should turn right and turns left instead)
    if (steering_weight > 0.2 and steering_angle > 3) or (steering_weight < -0.2 and steering_angle < -3):
        reward -= abs(side_weight) * abs(steering_angle / 15)

    # Decrease reward if steering when not necessary
    if abs(steering_angle) > 3:
        reward -= no_steering_weight * (abs(steering_angle)/15)

    # Decrease reward if heading is wrong in no-steering-zones (based on example reward func)
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    direction_diff = abs(math.degrees(track_direction) - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    if direction_diff > 7.5:
        reward -= no_steering_weight * (direction_diff/15)

    # Return final reward
    return float(reward)
